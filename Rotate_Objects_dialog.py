# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RotateObjectsDialog
                                 A QGIS plugin
 Rotate objects on the layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-07
        git sha              : $Format:%H$
        copyright            : (C) 2022 by plyushchikova Vera
        email                : plyushchikova.v.s@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import QgsProcessingFeatureSourceDefinition, QgsFeatureRequest
from qgis.PyQt import QtWidgets
from qgis.utils import iface
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
import processing

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Rotate_Objects_dialog_base.ui'))


class RotateObjectsDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        super(RotateObjectsDialog, self).__init__(parent)
        self.setupUi(self)
        self.setWindowFlag(Qt.WindowStaysOnTopHint)
        self.btn_ok.clicked.connect(self.rotate)

    def rotate(self):
        layer = iface.activeLayer()
        if not layer:
            QMessageBox.warning(self, "Warning", r"Загрузите векторный слой!",
                                QMessageBox.Ok)
        else:
            angle = self.angle.text()
            if angle.isdigit() or (angle[0] == "-" and angle[1:].isdigit()):
                angle = int(angle)
                provider = layer.dataProvider()
                list_geom = []
                calculate_center = processing.run('qgis:meancoordinates', {'INPUT': QgsProcessingFeatureSourceDefinition(\
                    layer.name()+".shp", selectedFeaturesOnly=True, featureLimit=-1,\
                    geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),\
                    'OUTPUT' : 'TEMPORARY_OUTPUT', 'UID' : '', 'WEIGHT' : '' })
                for c in calculate_center["OUTPUT"].getFeatures():
                    center = c.geometry().asPoint()
                for feature in layer.selectedFeatures():
                    geom = feature.geometry()
                    geom.rotate(angle, center)
                    list_geom.append([feature.id(), geom])

                layer.startEditing()
                provider.changeGeometryValues({
                    value[0]: value[1] for value in list_geom
                })
                layer.commitChanges()
            else:
                QMessageBox.warning(self, "Warning", r"Введите число!",
                                    QMessageBox.Ok)
